;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
                INCLUDE 'derivative.inc'

; export symbols
            XDEF _Startup, main
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on

            XREF __SEG_END_SSTACK       ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT             ; Insert here your data definition

; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK    ; initialize the stack pointer
            TXS
            CLI                         ; enable interrupts
            LDA #$FF
            STA DDRB
            LDA #%11110011
            STA DDRD
            LDA #%01000110
            STA TSC

mainLoop:
            ; Insert your code here
            NOP
            LDA #$00
            STA PTB
            LDA #$00
            STA PTD
            LDA #$80
            STA TMODH
            LDA #$04
            STA TMODL
COMIENZO:
    LDX #$00               
CARGAR:
    CPX #$00       
    BEQ C0
    CPX #$01
    BEQ C1
    CPX #$02
    BEQ C2
    CPX #$03
    BEQ C3
C0
    LDA #%00000110
    BCLR PTD_PTD5,PTD
    BCLR PTD_PTD6,PTD 
    JMP MONSTRAR
C1
    LDA #%11011010
    BSET PTD_PTD5,PTD
    BCLR PTD_PTD6,PTD                 

    JMP MONSTRAR
C2
    LDA #%11001110
    BCLR PTD_PTD5,PTD
    BSET PTD_PTD6,PTD        

    JMP MONSTRAR
C3
    LDA #%01100110
    BSET PTD_PTD5,PTD
    BSET PTD_PTD6,PTD        

    JMP MONSTRAR
MONSTRAR
    STA PTB
    CLRA
    JSR RETARDO
    INCX
    CPX #4
    BNE CARGAR
    JMP COMIENZO

RETARDO
    INCA
    CMP #$FF
    BNE RETARDO
    RTS

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
Int_TIMOvr
       
;Incremento de seg y min

            LDA seg
            INCA                    ;seg+1
            DAA                     ;decimal adjust
            STA seg
            CMP #%01100000          ;comparo con 60 en BCD
            BNE seg_7s              ;si seg!=60
            CLR seg                 ;si seg=60
            LDA #%10111110          ;   0 en 7 segmentos
            STA segL_7s
            STA segH_7s
            LDA min
            INCA                    ;   min+1
            DAA                     ;   decimal adjust
            STA min
            CMP #%01100000          ;   comparo con 60 en BCD
            BNE min_7s              ;   si min!=60
            CLR min                 ;   si min=60
            LDA #%10111110          ;       0 en 7 segmentos
            STA minL_7s
            STA minH_7s
            BRA fin_int
            
;Conversion a 7 segmentos

seg_7s      JSR BCDa7s
            PSHA
            LDA ,X
            STA segL_7s
            PULA
            JSR BCDa7s
            LDA ,X
            STA segH_7s
            BRA fin_int
            
min_7s      JSR BCDa7s
            PSHA
            LDA ,X
            STA minL_7s
            PULA
            JSR BCDa7s
            LDA ,X
            STA minH_7s
            BRA fin_int

;Rutina de conversion de BCD a 7 segmentos (Tabla: 0 4 8 2 6 1 5 9 3 7)

BCDa7s      
            LDX #tabla_7s_par       ;me paro al principio de la tabla
            LSRA                    ;mando b0 al carry
            BCC b0_0                ;si carry=0, sigo de largo
            LDX #tabla_7s_impar     ;si carry=1, IX=IX+5
b0_0        LSRA                    ;mando b1 al carry
            BCC b1_0                ;si carry=0, sigo de largo
            INCX                    ;si carry=1, IX=IX+3
            INCX
            INCX
b1_0        LSRA                    ;mando b2 al carry
            BCC b2_0                ;si carry=0, sigo de largo
            INCX                    ;si carry=1, IX=IX+1
b2_0        LSRA                    ;mando b3 al carry
            BCC b3_0                ;si carry=0, sigo de largo
            INCX                    ;si carry=1, IX=IX+2
            INCX
b3_0        RTS
            
fin_int     RTI

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vacio            
            rti          ; retorna sin hacer nada

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 org  INT_ADC  ; a partir de $FFDE

            dcw   Vacio             ;FFDE+FFDF, (INT_ADC)
            dcw   Vacio             ;FFE0+FFE1, (INT KBI)
            dcw   Vacio             ;FFE2+FFE3, (reservado 2, no usado)
            dcw   Vacio             ;FFE4+FFE5, (reservado 3, no usado)
            dcw   Vacio             ;FFE6+FFE7, (reservado 4, no usado)
            dcw   Vacio             ;FFE8+FFE9, (reservado 5, no usado)
            dcw   Vacio             ;FFEA+FFEB, (reservado 6, no usado)
            dcw   Vacio             ;FFEC+FFED, (reservado 7, no usado)
            dcw   Vacio             ;FFEE+FFEF, (reservado 8, no usado)
            dcw   Vacio             ;FFE0+FFE1, (reservado 9, no usado)
            dcw   Int_TIMOvr        ;FFF2+FFF3, (TIMOvr) 
            dcw   Vacio             ;FFF4+FFF5, (TIM Channel 1) 
            dcw   Vacio             ;FFF6+FFF7, (TIM Channel 0) 
            dcw   Vacio             ;FFE8+FFE9, (reservado 13, no usado)
            dcw   Vacio             ;FFFA+FFFB, (IRQ)
            dcw   Vacio             ;FFFC+FFFD, (SWI)
;           dcw   main              ;FFFE+FFFF, (RESET)
